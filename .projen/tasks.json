{
  "tasks": {
    "_bootstrap:DEV": {
      "name": "_bootstrap:DEV",
      "description": "Command to bootstrap your DEV account",
      "steps": [
        {
          "say": "Bootstrapping your DEV account..."
        },
        {
          "exec": "cross-env cdk bootstrap --profile $DEV_ACCOUNT_AWS_PROFILE --qualifier $CDK_QUALIFIER           --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess           --trust ${ACCOUNT_RES} aws://${ACCOUNT_DEV}/${AWS_REGION}",
          "receiveArgs": false,
          "env": {
            "CDK_QUALIFIER": "wrapper"
          }
        }
      ],
      "condition": "[ ! -n \"$CI\" ]"
    },
    "_bootstrap:INT": {
      "name": "_bootstrap:INT",
      "description": "Command to bootstrap your INT account",
      "steps": [
        {
          "say": "Bootstrapping your INT account..."
        },
        {
          "exec": "cross-env cdk bootstrap --profile $INT_ACCOUNT_AWS_PROFILE --qualifier $CDK_QUALIFIER           --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess           --trust ${ACCOUNT_RES} aws://${ACCOUNT_INT}/${AWS_REGION}",
          "receiveArgs": false,
          "env": {
            "CDK_QUALIFIER": "wrapper"
          }
        }
      ],
      "condition": "[ ! -n \"$CI\" ]"
    },
    "_bootstrap:RES": {
      "name": "_bootstrap:RES",
      "description": "Command to bootstrap your RES account",
      "steps": [
        {
          "say": "Bootstrapping your RES account..."
        },
        {
          "exec": "cross-env cdk bootstrap --profile $RES_ACCOUNT_AWS_PROFILE --qualifier $CDK_QUALIFIER        aws://${ACCOUNT_RES}/${AWS_REGION}",
          "receiveArgs": false,
          "env": {
            "CDK_QUALIFIER": "wrapper"
          }
        }
      ],
      "condition": "[ ! -n \"$CI\" ]"
    },
    "_deploy": {
      "name": "_deploy",
      "steps": [
        {
          "exec": "cross-env cdk deploy --profile $RES_ACCOUNT_AWS_PROFILE --all",
          "receiveArgs": true
        }
      ]
    },
    "_destroy": {
      "name": "_destroy",
      "steps": [
        {
          "exec": "cross-env cdk destroy --profile $RES_ACCOUNT_AWS_PROFILE",
          "receiveArgs": true
        }
      ]
    },
    "_diff": {
      "name": "_diff",
      "steps": [
        {
          "exec": "cross-env cdk diff --profile $RES_ACCOUNT_AWS_PROFILE",
          "receiveArgs": true
        }
      ]
    },
    "_synth": {
      "name": "_synth",
      "steps": [
        {
          "exec": "cross-env cdk synth --profile $RES_ACCOUNT_AWS_PROFILE",
          "receiveArgs": true
        }
      ]
    },
    "_workbench": {
      "name": "_workbench",
      "steps": [
        {
          "exec": "cross-env cdk deploy --profile $DEV_ACCOUNT_AWS_PROFILE -c \"workbench=true\"",
          "receiveArgs": true
        }
      ]
    },
    "_workbench:destroy": {
      "name": "_workbench:destroy",
      "steps": [
        {
          "exec": "cross-env cdk destroy --profile $DEV_ACCOUNT_AWS_PROFILE -c \"workbench=true\"",
          "receiveArgs": true
        }
      ]
    },
    "_workbench:synth": {
      "name": "_workbench:synth",
      "steps": [
        {
          "exec": "cross-env cdk synth --profile $DEV_ACCOUNT_AWS_PROFILE -c \"workbench=true\"",
          "receiveArgs": true
        }
      ]
    },
    "audit": {
      "name": "audit",
      "steps": [
        {
          "spawn": "check-dependencies"
        },
        {
          "spawn": "license"
        },
        {
          "spawn": "security-scan"
        }
      ]
    },
    "bootstrap": {
      "name": "bootstrap",
      "description": "Command to bootstrap your account",
      "steps": [
        {
          "exec": "dotenv -- npm run _bootstrap:$@",
          "receiveArgs": true
        }
      ],
      "condition": "[ ! -n \"$CI\" ]"
    },
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets"
    },
    "cdkls": {
      "name": "cdkls",
      "steps": [
        {
          "exec": "dotenv -- cross-env cdk ls"
        }
      ]
    },
    "check-dependencies": {
      "name": "check-dependencies",
      "description": "Notice file checking and generation",
      "steps": [
        {
          "exec": "cdk-cicd check-dependencies",
          "receiveArgs": true
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploys your CDK app to the AWS cloud",
      "steps": [
        {
          "exec": "dotenv -- npm run _deploy",
          "receiveArgs": true
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "dotenv -- npm run _destroy",
          "receiveArgs": true
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "dotenv -- npm run _diff",
          "receiveArgs": true
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "info": {
      "name": "info",
      "steps": [
        {
          "say": "Information:"
        },
        {
          "exec": "cross-env echo \"AWS Region : $(dotenv -p AWS_REGION)\""
        },
        {
          "exec": "cross-env echo \"RES Account: $(dotenv -p ACCOUNT_RES)\""
        },
        {
          "exec": "cross-env echo \"AWS Profile: $(dotenv -p RES_ACCOUNT_AWS_PROFILE)\""
        },
        {
          "exec": "cross-env echo \"Workbench stage\": $WORKBENCH_STAGE"
        },
        {
          "exec": "cross-env echo \"Workbench profile\": $WORKBENCH_AWS_PROFILE"
        },
        {
          "exec": "cross-env echo \"CDK Qualifier: ${CDK_QUALIFIER}\"",
          "env": {
            "CDK_QUALIFIER": "wrapper"
          }
        },
        {
          "say": "Accounts:"
        },
        {
          "exec": "cross-env echo \"  - ${stage}: $(dotenv -p ACCOUNT_${stage}) -- profile: $(dotenv -p ${stage}_ACCOUNT_AWS_PROFILE)\"",
          "env": {
            "stage": "DEV"
          }
        },
        {
          "exec": "cross-env echo \"  - ${stage}: $(dotenv -p ACCOUNT_${stage}) -- profile: $(dotenv -p ${stage}_ACCOUNT_AWS_PROFILE)\"",
          "env": {
            "stage": "INT"
          }
        },
        {
          "spawn": "cdkls"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "license": {
      "name": "license",
      "description": "Notice file checking and generation",
      "steps": [
        {
          "exec": "cdk-cicd license",
          "receiveArgs": true
        }
      ]
    },
    "lint": {
      "name": "lint",
      "steps": [
        {
          "spawn": "eslint"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "security-scan": {
      "name": "security-scan",
      "description": "Notice file checking and generation",
      "steps": [
        {
          "exec": "cdk-cicd security-scan",
          "receiveArgs": true,
          "args": [
            "--bandit",
            "--semgrep",
            "--shellcheck",
            "-ci"
          ],
          "condition": "[ -n \"$CI\" ]"
        },
        {
          "exec": "cdk-cicd security-scan --bandit --semgrep --shellcheck",
          "receiveArgs": true,
          "args": [
            "--bandit",
            "--semgrep",
            "--shellcheck"
          ],
          "condition": "[ ! -n \"$CI\" ]"
        }
      ]
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "dotenv -- npm run _synth",
          "receiveArgs": true
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "cdk synth -q"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,cross-env,dotenv-cli,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,projen,ts-jest,ts-node,typescript,@cdklabs/cdk-cicd-wrapper,@cdklabs/cdk-cicd-wrapper-cli,@cdklabs/cdk-cicd-wrapper-projen,cdk-nag"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @stylistic/eslint-plugin @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk cross-env dotenv-cli esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit projen ts-jest ts-node typescript @cdklabs/cdk-cicd-wrapper @cdklabs/cdk-cicd-wrapper-cli @cdklabs/cdk-cicd-wrapper-projen aws-cdk-lib cdk-nag constructs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "validate": {
      "name": "validate",
      "steps": [
        {
          "exec": "cdk-cicd validate",
          "receiveArgs": true
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    },
    "workbench": {
      "name": "workbench",
      "steps": [
        {
          "exec": "dotenv -- npm run _workbench",
          "receiveArgs": true
        }
      ]
    },
    "workbench:destroy": {
      "name": "workbench:destroy",
      "steps": [
        {
          "exec": "dotenv -- npm run _workbench:destroy",
          "receiveArgs": true
        }
      ]
    },
    "workbench:synth": {
      "name": "workbench:synth",
      "steps": [
        {
          "exec": "dotenv -- npm run _workbench:synth",
          "receiveArgs": true
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
